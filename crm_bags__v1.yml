openapi: 3.0.0
info:
  version: "1"
  title: "CRMBags"
  description: >
    This is an API for Bag deals managment
    

    *Question to discuss*
      - Deduplication logic in post methods?
      - Id of entities will be generated. What format? UUID? Incremental id with prefix?
      - bag status field - should it be bag status?
      - ret_bag?

servers:
  - url: http://server-host/openapi/CRMBags/v1
tags:
  - name: BagDeals
paths:
  "/bags":
    post:
      tags:
        - BagDeals
      summary: "Create a Bag Deal"
      description: ""
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagDealPostRequest'
      responses:
        "200":
          description: "Bag Deal successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BagDealResult'
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    get:
      tags:
        - BagDeals
      summary: "Get list of Bag Deals"
      description: "Get list of Bag Deals"
      parameters:
        - name: rql
          in: query
          required: false
          schema:
            type: string
            example: 'and(eq(name,John),eq(surname,Smith))'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 1000
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            example: 'name'
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum:
              - "asc"
              - "desc"
            default: "asc"
            example: 'asc'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BagDealListResult"
        '500':
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  "/bags/{id}":
    get:
      tags:
        - BagDeals
      summary: 'Get info about specific Bag Deal'
      description: "Returns information of Bag Deal by id"
      parameters:
        - in: path
          name: id
          description: Id of resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BagDealResult'
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    put:
      tags:
        - BagDeals
      summary: Update Bag Deal by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BagDealResult'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagDealPutRequest'

components:
  schemas:
  # Common
    ErrorResult:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
      description: "Message field is not required"
    Message:
      type: object
      properties:
        level:
          type: string
          enum:
            - emergency
            - alert
            - critical
            - error
            - warning
            - notice
            - info
        type:
          type: string
          enum:
            - UNDEFINED
            - LOGGER_MESSAGE
          description: >
            You can expose this enum for all your errors
            UNDEFINED - Any undefined message type
            LOGGER_MESSAGE - Same as undefined
        text:
          type: string
          description: Message, that describes what went wrong
    SuccessResult:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          type: object

    # Bag Deals
    BagDealResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BagDeal'

    BagDealListResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BagDeal'

    BagDealPostRequest:
      $ref: '#/components/schemas/BagDeal'

    BagDealPutRequest:
      $ref: '#/components/schemas/BagDeal'

    BagProduct:
      type: object
      description: >
        Object, represents item in bag. Each object does
        not include quantity. If item there are 2 items in deal,
        it will be duplicated.
      properties:
        id: 
          type: string
          description: Id of item in CRM (rollunId)
          example: XDE4R
        price:
          type: number
          description: unit price
          example: 42
        csn:
          type: string
          description: Catalog Supplier Number - item identifier from supplier
          example: '0000000111111'
        name:
          type: string
          description: The name of the items
          example: 'CRG 1001500112'
          
    Customer:
      type: object
      required: 
        - id
        - address
        - contactInfo
        - firstName
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identificator of order deal (generated by server).
          example: "AP7734"
        firstName:
          type: string
          description: The first name of the customer
        lastName:
          type: string
          description: The last name of the customer
        address:
          type: object
          required: 
            - city
            - street1
            - street2
            - zip
            - state
          properties:
            city:
              type: string
            street1:
              type: string
            street2:
              type: string
            zip:
              type: string
            state:
              type: string
        contactInfo:
          type: object
          required: 
            - phoneNumber
            - email
          properties:
            email:
              type: string
            phoneNumber:
              type: string
        createdAt:
          type: string
          description: When entity was created
          format: 'date-time'
        updatedAt:
          type: string
          description: When entity was created
          format: 'date-time'
    
    BagDealSupplierData:
      type: object
      required: 
        - name
        - orderNumber
        - orderId
        - payment
      properties:
        name:
          type: string
          description: Name of the supplier
          example: PartsUnlimited
        orderId:
          type: string
          description: Id of order from supplier
          example: PartsUnlimited | A75CL
        orderNumber:
          type: string
          description: Supplier order number
          example: A75CL
        payment:
          type: object
          required: 
            - card
            - itemsTotal
          properties:
            card:
              type: string
              description: The card, that was used to pay for order
              example: op acct
            itemsTotal:
              type: number
              description: Sum of item prices from supplier
              example: 42
              
    BagDealMarketplaceData:
      type: object
      properties:
        name:
          type: string
          description: Name of the marketplace.
          example: Amazon Shoptimistic
          
    BagDealShippingData:
      type: object
      properties:
        warehouse:
          type: string
          example: pickup_wi
          description: What warehouse was used to send order
        tracknumber:
          type: string
          example: '1Z5872850386382656'
          description: Tracking number for bag order.
        carrier:
          type: string
          description: The delivery service, used to ship an order
          example: UPS
        status:
          type: string
          description: The status of bag order
          example: in_transit
    
    BagDeal:
      type: object
      required: 
        - id
        - createdAt
        - updatedAt
        - status
      properties:
        id:
          type: string
          description: Unique identificator of order deal (generated by server).
          example: "AP7734"
        customer:
          $ref: '#/components/schemas/Customer'
        marketplace:
          $ref: '#/components/schemas/BagDealMarketplaceData'
        supplier:
          $ref: '#/components/schemas/BagDealSupplierData'
        status:
          type: string
          enum: 
            - LabelsPreparation
            - Packaging
            - Archive
        products:
          type: array
          items:
            $ref: '#/components/schemas/BagProduct'
        shipping:
          $ref: '#/components/schemas/BagDealShippingData'
        problem:
          type: string
          description: The problem with order, null if everything is fine
          example: Something went wrong
        createdAt:
          type: string
          description: When entity was created
          format: 'date-time'
        updatedAt:
          type: string
          description: When entity was created
          format: 'date-time'