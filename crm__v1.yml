openapi: 3.0.0
info:
  version: "1"
  title: "CRM"
  description: >
    This is a contract for CRM API. It implements deals,
    clients, items management. 


    Deals can be of several types (schemas) -
      - Order
      - Bag
      - Pickup
      - Dropship
      - Problem
      - Return
    
    For each time a CRUD API will be offered.
    
    Spec is in developemnt, so braking changes can be done
    without bumping major version
    

    *Question to discuss*
      - Deduplication logic in post methods?
      - Id of entities will be generated. What format? UUID? Incremental id with prefix?

servers:
  - url: http://server-host/openapi/CRM/v1
tags:
  - name: OrderDeals
paths:
  "/deals/orders":
    post:
      tags:
        - OrderDeals
      summary: "Create An Order Deal"
      description: ""
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDealPostRequest'
      responses:
        "200":
          description: "Order Deal successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDealResult'
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    get:
      tags:
        - OrderDeals
      summary: "Get list of Order Deals"
      description: "Get list of Order Deals"
      parameters:
        - in: query
          name: "filter"
          example: "eq(mpOrderNumber,string:01-01-01)"
          description: "Returning orders with by a specific rql filter."
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDealListResult"
        '500':
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  "/deals/orders/{id}":
    get:
      tags:
        - OrderDeals
      summary: 'Get info about specific Order Deal'
      description: "Returns information of Order Deal by id"
      parameters:
        - in: path
          name: id
          description: Id of resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDealResult'
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  "/clients":
    post:
      tags:
        - Clients
      summary: "Create a Client"
      description: ""
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPostRequest'
      responses:
        "200":
          description: "Client successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResult'
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    get:
      tags:
        - Clients
      summary: "Get list of Order Deals"
      description: "Get list of Order Deals"
      parameters:
        - in: query
          name: "filter"
          example: "eq(mpOrderNumber,string:01-01-01)"
          description: "Returning orders with by a specific rql filter."
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientListResult"
        '500':
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  "/clients/{id}":
    get:
      tags:
        - Clients
      summary: 'Get info about specific Order Deal'
      description: "Returns information of Order Deal by id"
      parameters:
        - in: path
          name: id
          description: Id of resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResult'
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
components:
  schemas:
  # Common
    ErrorResult:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
      description: "Message field is not required"
    Message:
      type: object
      properties:
        level:
          type: string
          enum:
            - emergency
            - alert
            - critical
            - error
            - warning
            - notice
            - info
        type:
          type: string
          enum:
            - UNDEFINED
            - LOGGER_MESSAGE
          description: >
            You can expose this enum for all your errors
            UNDEFINED - Any undefined message type
            LOGGER_MESSAGE - Same as undefined
        text:
          type: string
          description: Message, that describes what went wrong
    SuccessResult:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          type: object

    BaseEntity:
      type: object
      properties:
        id:
          type: string
          description: Unique identificator of order deal (generated by server).
          example: "AP7734"
        createdAt:
          type: string
          description: When entity was created
          format: 'date-time'
        updatedAt:
          type: string
          description: When entity was created
          format: 'date-time'

    # Order Deals
    OrderDealResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrderDeal'

    OrderDealListResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderDeal'

    OrderDealPostRequest:
      type: object
      properties: {}

    OrderDeal:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties: {}
    
    # Clients
    ClientResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Client'

    ClientListResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Client'

    ClientPostRequest:
      type: object
      properties: {}

    Client:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties: {}
